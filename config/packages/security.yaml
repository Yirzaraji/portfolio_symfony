security:
  encoders:
    App\Entity\User:
      algorithm: bcrypt

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    users_in_memory: { memory: null }
    in_database:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      provider: in_database

      form_login:
        login_path: account_login
        check_path: account_login

    #   logout:
    #     path: account_logout
    #     target: account_login
    #   login:
    #     pattern: ^/api/login
    #     stateless: true
    #     anonymous: true
    #     json_login:
    #       check_path: /api/login_check
    #       success_handler: lexik_jwt_authentication.handler.authentication_success
    #       failure_handler: lexik_jwt_authentication.handler.authentication_failure
    #   api:
    #     pattern: ^/api
    #     stateless: true
    #     guard:
    #       authenticators:
    #         - lexik_jwt_authentication.jwt_token_authenticator

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#firewalls-authentication

    # https://symfony.com/doc/current/security/impersonating_user.html
    # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
